<?php
require_once('/../libraries/veritrans-php/Veritrans.php');
/**
 * @file
 * Veritrans payment method for Drupal Commerce for testing and development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_veritrans_web_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_veritrans_web'] = array(
    'base' => 'commerce_veritrans_web',
    'title' => t('Veritrans VT-Web'),
    'short_title' => t('VT-Web'),
    'display_title' => t('Veritrans Payment Gateway for VT-Web'),
    'description' => t('Veritrans Payment Gateway for VT-Web'),
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_veritrans_web_settings_form( $settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'payment_label' => '',
    'server_key' => '',
    'client_key' => '',
    'payment_type' => array(),
    'is_sanitized' => '',
    'is3ds' => '',
    'payment_mode' => '',
  );

  // $form['payment_label'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Frontend Payment Text Label'),
  //   '#description' => t('Frontend payment text label that will be displayed to your customer'),
  //   '#default_value' => variable_get($settings['payment_label']),
  //   '#size' => 50,
  //   '#required' => TRUE,
  // );

  $form['server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Key'),
    '#description' => t('Your Veritrans Server key.'),
    '#default_value' => $settings['server_key'],
    '#size' => 50,
    '#required' => TRUE,
  );

  $form['is_sanitized'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Sanitized'),
    '#default_value' => $settings['is_sanitized'],
    '#description' => t('Payment is sanitized'),
  );

  $form['is3ds'] = array(
    '#type' => 'checkbox',
    '#title' => t('3D-Secure'),
    '#default_value' => $settings['is3ds'],
    '#description' => t('Payment is 3D-Secure'),
  );

  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('The mode for capturing payment.'),
    '#options' => array(
      'LIVE' => t('Live transactions'),
      'TEST' => t('Test transactions'),
    ),
    '#default_value' => $settings['payment_mode'],
  );

  /*
   * If Need then pass these types in options.
   * $types = array(t('Credit Card'), t('Mandiri ClickPay'),t('CIMB Clicks'), 
   * t('Virtual Account'), t('e-Pay BRI'),);
   */
   
  $form['payment_type_credit_card'] = array(
    '#type' => 'checkbox',
    '#title' => t('Credit Card'),
    '#default_value' => $settings['payment_type_credit_card'],
    '#description' => t('Enable Credit Card payment method'),
  );
   
  $form['payment_type_mandiri_clickpay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mandiri ClickPay'),
    '#default_value' => $settings['payment_type_mandiri_clickpay'],
    '#description' => t('Enable Mandiri ClickPay payment method'),
  );
  
  $form['payment_type_cimb_clicks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cimb Clicks'),
    '#default_value' => $settings['payment_type_cimb_clicks'],
    '#description' => t('Enable Cimb Clicks payment method'),
  );
  
  $form['payment_type_bank_transfer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bank Transfer'),
    '#default_value' => $settings['payment_type_bank_transfer'],
    '#description' => t('Enable Bank Transfer payment method'),
  );
  
  $form['payment_type_bri_epay'] = array(
    '#type' => 'checkbox',
    '#title' => t('BRI Epay'),
    '#default_value' => $settings['payment_type_bri_epay'],
    '#description' => t('Enable BRI Epay payment method'),
  );
  
  $form['payment_type_telkomsel_cash'] = array(
    '#type' => 'checkbox',
    '#title' => t('Telkomsel Cash'),
    '#default_value' => $settings['payment_type_telkomsel_cash'],
    '#description' => t('Enable Telkomsel Cash payment method'),
  );
  
  $form['payment_type_xl_tunai'] = array(
    '#type' => 'checkbox',
    '#title' => t('XL Tunai'),
    '#default_value' => $settings['payment_type_xl_tunai'],
    '#description' => t('Enable XL Tunai payment method'),
  );
  
  $form['payment_type_echannel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mandiri BillPayment'),
    '#default_value' => $settings['payment_type_echannel'],
    '#description' => t('Enable Mandiri BillPayment payment method'),
  );
  
  $form['payment_type_bbm_money'] = array(
    '#type' => 'checkbox',
    '#title' => t('BBM Money'),
    '#default_value' => $settings['payment_type_bbm_money'],
    '#description' => t('Enable BBM Money payment method'),
  );
  
  $form['payment_type_cstore'] = array(
    '#type' => 'checkbox',
    '#title' => t('Indomaret'),
    '#default_value' => $settings['payment_type_cstore'],
    '#description' => t('Enable indomaret payment method'),
  );
  
  $form['payment_indosat_dompetku'] = array(
    '#type' => 'checkbox',
    '#title' => t('Indosat Dompetku'),
    '#default_value' => $settings['payment_indosat_dompetku'],
    '#description' => t('Enable Indosat Dompetku payment method'),
  );

  // $form['payment_type'] = array(
  //   '#type' => 'checkboxes',
  //   '#title' => t('Payment type'),
  //   '#options' => drupal_map_assoc(array(t('Credit Card'),)),
  //   '#default_value' => array('Credit Card'),
  //   '#attributes' => array('disabled'=>'disabled'),
  // );

  return $form;
}

function commerce_veritrans_web_settings_form_submit(&$form_state){
  if ($form_state['values']['server_key']) {
    variable_set('commerce_veritrans_web_server_key', $form_state['values']['server_key']);
    error_log('saved '.print_r(variable_get('server_key')));
  }  

  if ($form_state['values']['payment_mode']) {
    variable_set('commerce_veritrans_payment_mode', $form_state['values']['payment_mode']);
  }
}

/**
 * Payment method callback: redirect form.
 *   A wrapper around the module's general use function for building a WPS form.
 */
function commerce_veritrans_web_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['server_key'])) {
    drupal_set_message(t('Veritrans is not configured for use. Please check the Veritrans Server Key.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
      'absolute' => TRUE,
    )),
    // Specify the current payment method instance ID in the notify_url.
    'pay_method' => $payment_method['instance_id'],
  );

  return commerce_veritrans_web_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Builds a DirectPay Paymentform from an order object.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - cancel_return: the URL PayPal should send the user to on cancellation
 *   - return: the URL PayPal should send the user to on successful payment
 *   - currency_code: the PayPal currency code to use for this payment if the
 *     total for the order is in a non-PayPal supported currency
 *   - payment_method: optionally the name of the Commerce payment method to
 *     include in the IPN notify_url.
 */
function commerce_veritrans_web_order_form($form, &$form_state, $order, $settings = array()) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  // Get the order total in the default currency.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);

  // Build a description for the order.
  $items_details = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $item = array();
    $line_item_price = $line_item_wrapper->commerce_unit_price->amount->value();
    $item['id'] = $line_item_wrapper->line_item_id->value();
    $item['quantity'] = round($line_item_wrapper->quantity->value(), 2);
    $item['price'] = commerce_currency_amount_to_decimal($line_item_price, $currency_code);
    $item['name'] = $line_item_wrapper->line_item_label->value();
    $items_details[] = $item;
  }

  // libraries_load('veritrans');

  Veritrans_Config::$serverKey = $settings['server_key'];

  // Prepare the billing address for use in the request.
  // Uncomment for production environment.
  Veritrans_Config::$isProduction = ($settings['payment_mode'] == 'TEST') ? FALSE : TRUE;
  // Uncomment to enable sanitization.
  Veritrans_Config::$isSanitized = $settings['is_sanitized'] ? TRUE : FALSE;
  // Uncomment to enable 3D-Secure.
  Veritrans_Config::$is3ds = $settings['is3ds'] ? TRUE : FALSE;
  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  // $payements_type_list = array(
  //   'Credit Card' => 'credit_card',
  //   'Mandiri ClickPay' => 'mandiri_clickpay',
  //   'CIMB Clicks' => 'cimb_clicks',
  //   'Virtual Account' => 'bank_transfer',
  //   'e-Pay BRI' => 'bri_epay',
  // );

  // error_log('============================================================='); //debugan
  // error_log('payment type settings: '.print_r($settings,true)); //debugan
  // $payements_type = array();
  // foreach ($settings['payment_type'] as $value) {
  // error_log('foreach value: '.$value); //debugan
  //   if ($value) {
  //     error_log('$payements_type_list[$value]: '.$payements_type_list[$value]); //debugan
  //     $payements_type[] = $payements_type_list[$value];
  //   }
  // }
  // error_log('payments_type[]: '.print_r($payements_type,true)); //debugan

  if($settings['payment_type_credit_card']){
    $payements_type[] = 'credit_card';
  }
  if($settings['payment_type_mandiri_clickpay']){
    $payements_type[] = 'mandiri_clickpay';
  }
  if($settings['payment_type_cimb_clicks']){
    $payements_type[] = 'cimb_clicks';
  }
  if($settings['payment_type_bank_transfer']){
    $payements_type[] = 'bank_transfer';
  }
  if($settings['payment_type_bri_epay']){
    $payements_type[] = 'bri_epay';
  }
  if($settings['payment_type_telkomsel_cash']){
    $payements_type[] = 'telkomsel_cash';
  }
  if($settings['payment_type_xl_tunai']){
    $payements_type[] = 'xl_tunai';
  }
  if($settings['payment_type_echannel']){
    $payements_type[] = 'echannel';
  }
  if($settings['payment_type_bbm_money']){
    $payements_type[] = 'bbm_money';
  }
  if($settings['payment_type_cstore']){
    $payements_type[] = 'cstore';
  }
  if($settings['payment_indosat_dompetku']){
    $payements_type[] = 'indosat_dompetku';
  }

  //// ultimate add
  if ($settings['server_key']) {
    variable_set('commerce_veritrans_web_server_key', $settings['server_key']);
    error_log('saved key'.variable_get('commerce_veritrans_web_server_key'));
  }  

  if ($settings['payment_mode']) {
    variable_set('commerce_veritrans_web_payment_mode', $settings['payment_mode']);
    error_log('saved mode'.variable_get('commerce_veritrans_web_payment_mode'));
    error_log('should be '.$settings['payment_mode']);
  }
  ///// end of add

  $params = array(
    "vtweb" => array(
      'enabled_payments' => $payements_type,
      'finish_redirect_url' => $settings['return'],
      'unfinish_redirect_url' => $settings['cancel_return'],
      'error_redirect_url' => $settings['cancel_return'],
    ),
    'transaction_details' => array(
      'order_id' => $order->order_id,
      'gross_amount' => $amount,
    ),
    'item_details' => $items_details,
    'customer_details' => array(
      'first_name' => $billing_address['first_name'],
      'last_name' => $billing_address['last_name'],
      'email' => drupal_substr($order->mail, 0, 100),
      'phone' => $order_wrapper->commerce_customer_billing->commerce_veritrans_billing_phone->value(),
      'billing_address' => array(
        'first_name' => $billing_address['first_name'],
        'last_name' => $billing_address['last_name'],
        'address' => $billing_address['thoroughfare'],
        'city' => $billing_address['locality'],
        'postal_code' => $billing_address['postal_code'],
        'country_code' => commerce_veritrans_convert_country_code($billing_address['country']),
        'phone' => $order_wrapper->commerce_customer_billing->commerce_veritrans_billing_phone->value(),
      ),
    ),
  );

  watchdog('commerce_veritrance', 'Data to send veritrans: !Response :', array('!Response' => '<pre>' . print_r($params, TRUE) . '</pre>'), WATCHDOG_DEBUG);

  try {
    // Redirect to Veritrans VTWeb page.
    $path = Veritrans_VtWeb::getRedirectionUrl($params);
    drupal_goto($path);
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
}
